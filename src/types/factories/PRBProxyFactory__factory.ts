/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PRBProxyFactory,
  PRBProxyFactoryInterface,
} from "../PRBProxyFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "origin",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "deployer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "seed",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "proxy",
        type: "address",
      },
    ],
    name: "DeployProxy",
    type: "event",
  },
  {
    inputs: [],
    name: "deploy",
    outputs: [
      {
        internalType: "address payable",
        name: "proxy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "deployFor",
    outputs: [
      {
        internalType: "address payable",
        name: "proxy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "eoa",
        type: "address",
      },
    ],
    name: "getNextSeed",
    outputs: [
      {
        internalType: "bytes32",
        name: "nextSeed",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "proxy",
        type: "address",
      },
    ],
    name: "isProxy",
    outputs: [
      {
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611013806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806354fd4d501161005057806354fd4d50146100e457806374912cd2146100ec578063775c300c1461011757600080fd5b8063297103881461006c57806337a6be16146100ad575b600080fd5b61009861007a3660046102b2565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100d66100bb3660046102b2565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016100a4565b6100d6600181565b6100ff6100fa3660046102b2565b61011f565b6040516001600160a01b0390911681526020016100a4565b6100ff610295565b3260008181526001602090815260408083205481519283019490945281018390529091908290606001604051602081830303815290604052805190602001209050600060405180602001610172906102a5565b6020820181038252601f19601f820116604052509050600060208201825184818385f56040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152919850908816935063f2fde38b92506024019050600060405180830381600087803b1580156101f957600080fd5b505af115801561020d573d6000803e3d6000fd5b505050506001600160a01b03848116600081815260208181526040808320805460ff191660019081179091553280855281845293829020908901905580518881529182018790528101929092529187169133917f6aafca263a35a9d2a6e4e4659a84688092f4ae153df2f95cd7659508d95c18709060600160405180910390a4505050919050565b60006102a03361011f565b905090565b610d24806102e383390190565b6000602082840312156102c457600080fd5b81356001600160a01b03811681146102db57600080fd5b939250505056fe608060405234801561001057600080fd5b50611388600155600080546001600160a01b0319163390811782556040519091907f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c908290a3610cbf806100656000396000f3fe6080604052600436106100c05760003560e01c80639d15956811610074578063e64624fa1161004e578063e64624fa1461029d578063f23a6e61146102bd578063f2fde38b1461030257600080fd5b80639d159568146101d8578063bc197c81146101fc578063da8d882c1461024157600080fd5b8063150b7a02116100a5578063150b7a02146101235780631cff79cd146101805780638da5cb5b146101a057600080fd5b806301ffc9a7146100cc57806309924a401461010157600080fd5b366100c757005b600080fd5b3480156100d857600080fd5b506100ec6100e7366004610799565b610322565b60405190151581526020015b60405180910390f35b34801561010d57600080fd5b5061012161011c3660046107bb565b61038b565b005b34801561012f57600080fd5b5061016761013e3660046108a2565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b031990911681526020016100f8565b61019361018e36600461090a565b6103d5565b6040516100f891906109da565b3480156101ac57600080fd5b506000546101c0906001600160a01b031681565b6040516001600160a01b0390911681526020016100f8565b3480156101e457600080fd5b506101ee60015481565b6040519081526020016100f8565b34801561020857600080fd5b50610167610217366004610a6d565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b34801561024d57600080fd5b506100ec61025c366004610b17565b6001600160a01b0392831660009081526002602090815260408083209490951682529283528381206001600160e01b03199290921681529152205460ff1690565b3480156102a957600080fd5b506101216102b8366004610b5a565b610649565b3480156102c957600080fd5b506101676102d8366004610bb5565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b34801561030e57600080fd5b5061012161031d366004610c1a565b6106d9565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061038557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6000546001600160a01b031633146103d05760005460405163ac976e3960e01b81526001600160a01b0390911660048201523360248201526044015b60405180910390fd5b600155565b6000546060906001600160a01b0316331461048a573360009081526002602090815260408083206001600160a01b0388168452825280832086356001600160e01b03198116855292529091205460ff16610488576000546040517fa2ee03b80000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015233602482015290861660448201526001600160e01b0319821660648201526084016103c7565b505b833b806104ce576040517f29ba3bdf0000000000000000000000000000000000000000000000000000000081526001600160a01b03861660048201526024016103c7565b600080546001546001600160a01b0390911691905a6104ed9190610c35565b90506000876001600160a01b031682888860405161050c929190610c5a565b6000604051808303818686f4925050503d8060008114610548576040519150601f19603f3d011682016040523d82523d6000602084013e61054d565b606091505b506000549096509091506001600160a01b038481169116146105b2576000546040517fbcac60ce0000000000000000000000000000000000000000000000000000000081526001600160a01b03808616600483015290911660248201526044016103c7565b876001600160a01b03167fb24ebe141c5f2a744b103bea65fce6c40e0dc65d7341d092c09b160f404479908888886040516105ef93929190610c6a565b60405180910390a28061063e5784511561060c5784518086602001fd5b6040517fe336368800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050509392505050565b6000546001600160a01b031633146106895760005460405163ac976e3960e01b81526001600160a01b0390911660048201523360248201526044016103c7565b6001600160a01b0393841660009081526002602090815260408083209590961682529384528481206001600160e01b03199390931681529190925291909120805460ff1916911515919091179055565b6000546001600160a01b031633146107195760005460405163ac976e3960e01b81526001600160a01b0390911660048201523360248201526044016103c7565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081178255604051909182917f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c9190a350565b80356001600160e01b03198116811461079457600080fd5b919050565b6000602082840312156107ab57600080fd5b6107b48261077c565b9392505050565b6000602082840312156107cd57600080fd5b5035919050565b80356001600160a01b038116811461079457600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561082a5761082a6107eb565b604052919050565b600082601f83011261084357600080fd5b813567ffffffffffffffff81111561085d5761085d6107eb565b610870601f8201601f1916602001610801565b81815284602083860101111561088557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156108b857600080fd5b6108c1856107d4565b93506108cf602086016107d4565b925060408501359150606085013567ffffffffffffffff8111156108f257600080fd5b6108fe87828801610832565b91505092959194509250565b60008060006040848603121561091f57600080fd5b610928846107d4565b9250602084013567ffffffffffffffff8082111561094557600080fd5b818601915086601f83011261095957600080fd5b81358181111561096857600080fd5b87602082850101111561097a57600080fd5b6020830194508093505050509250925092565b6000815180845260005b818110156109b357602081850181015186830182015201610997565b818111156109c5576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006107b4602083018461098d565b600082601f8301126109fe57600080fd5b8135602067ffffffffffffffff821115610a1a57610a1a6107eb565b8160051b610a29828201610801565b9283528481018201928281019087851115610a4357600080fd5b83870192505b84831015610a6257823582529183019190830190610a49565b979650505050505050565b600080600080600060a08688031215610a8557600080fd5b610a8e866107d4565b9450610a9c602087016107d4565b9350604086013567ffffffffffffffff80821115610ab957600080fd5b610ac589838a016109ed565b94506060880135915080821115610adb57600080fd5b610ae789838a016109ed565b93506080880135915080821115610afd57600080fd5b50610b0a88828901610832565b9150509295509295909350565b600080600060608486031215610b2c57600080fd5b610b35846107d4565b9250610b43602085016107d4565b9150610b516040850161077c565b90509250925092565b60008060008060808587031215610b7057600080fd5b610b79856107d4565b9350610b87602086016107d4565b9250610b956040860161077c565b915060608501358015158114610baa57600080fd5b939692955090935050565b600080600080600060a08688031215610bcd57600080fd5b610bd6866107d4565b9450610be4602087016107d4565b93506040860135925060608601359150608086013567ffffffffffffffff811115610c0e57600080fd5b610b0a88828901610832565b600060208284031215610c2c57600080fd5b6107b4826107d4565b600082821015610c5557634e487b7160e01b600052601160045260246000fd5b500390565b8183823760009101908152919050565b60408152826040820152828460608301376000606084830101526000601f19601f85011682016060838203016020840152610ca8606082018561098d565b969550505050505056fea164736f6c6343000809000aa164736f6c6343000809000a";

export class PRBProxyFactory__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PRBProxyFactory> {
    return super.deploy(overrides || {}) as Promise<PRBProxyFactory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PRBProxyFactory {
    return super.attach(address) as PRBProxyFactory;
  }
  connect(signer: Signer): PRBProxyFactory__factory {
    return super.connect(signer) as PRBProxyFactory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PRBProxyFactoryInterface {
    return new utils.Interface(_abi) as PRBProxyFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PRBProxyFactory {
    return new Contract(address, _abi, signerOrProvider) as PRBProxyFactory;
  }
}
